const transporter = require('./transporter');

/**
 * @param {Object} mailOptions - Options de l'email (from, to, subject, text, html, envelope)
 * @returns {Promise} - La promesse renvoy√©e par transporter.sendMail.
 */
const sendEmail = async (mailOptions) => {
  try {
    const info = await transporter.sendMail(mailOptions);
    console.log(`Email envoy√© √† ${mailOptions.to} :`, info.response);
    return info;
  } catch (error) {
    console.error(`Erreur lors de l'envoi d'un email √† ${mailOptions.to} :`, error);
    throw error;
  }
};

/**
 * Envoie un email de notification √† l'administrateur.
 * @param {Object} params - Param√®tres n√©cessaires pour configurer l'email.
 * @param {string} params.userName - Nom du participant.
 * @param {string} params.email - Email du participant.
 * @param {string} params.date - Date de participation.
 * @param {string} params.prizeWon - Lot gagn√©.
 * @param {string|number} params.prizeValue - Valeur du lot.
 * @returns {Promise}
 */
const sendAdminNotification = async ({ userName, email, date, prizeWon, prizeValue }) => {
  const mailOptions = {
    from: `${userName} <${email}>`,   // Affich√© dans l'en-t√™te "From:"
    to: 'contact.developeur@gmail.com',     // Email de l'administrateur
    subject: `Nouveau participant au concours Th√© Tip Top : ${userName}`,
    text: `Bonjour,

Un nouveau participant vient de jouer le ${date} dans le concours Th√© Tip Top.
D√©tails :
- Nom : ${userName}
- Email : ${email}
- Lot gagn√© : ${prizeWon}
- Valeur du lot : ${prizeValue} euros

Cordialement,
L'√©quipe Th√© Tip Top`,
    html: `
      <h3>Nouveau participant au concours Th√© Tip Top</h3>
      <p><strong>Date de participation :</strong> ${date}</p>
      <p><strong>Nom :</strong> ${userName}</p>
      <p><strong>Email :</strong> ${email}</p>
      <p><strong>Lot gagn√© :</strong> ${prizeWon}</p>
      <p><strong>Valeur du lot :</strong> ${prizeValue} euros</p>
      <p>Cordialement,<br>L'√©quipe Th√© Tip Top</p>
    `,
    envelope: {
      from: process.env.EMAIL_USER,
      to: 'contact.developeur@gmail.com'
    }
  };

  return sendEmail(mailOptions);
};

/**
 * Envoie un email de f√©licitations au participant.
 * @param {Object} params - Param√®tres n√©cessaires pour configurer l'email.
 * @param {string} params.userName - Nom du participant.
 * @param {string} params.email - Email du participant.
 * @param {string} params.date - Date de participation.
 * @param {string} params.prizeWon - Lot gagn√©.
 * @param {string|number} params.prizeValue - Valeur du lot.
 * @returns {Promise}
 */
const sendPlayerNotification = async ({ userName, email, date, prizeWon, prizeValue }) => {
  const mailOptions = {
    from: `Th√© Tip Top <${process.env.EMAIL_USER}>`,
    to: email,
    subject: 'F√©licitations, vous avez gagn√© dans le concours Th√© Tip Top !',
    text: `Bonjour ${userName},

F√©licitations ! Vous venez de gagner dans le concours Th√© Tip Top.
D√©tails de votre gain :
- Date de participation : ${date}
- Lot : ${prizeWon}
- Valeur : ${prizeValue} euros

Merci pour votre participation.

Cordialement,
L'√©quipe Th√© Tip Top`,
    html: `
      <p>Bonjour ${userName},</p>
      <p>F√©licitations ! Vous venez de gagner dans le concours <strong>Th√© Tip Top</strong>.</p>
      <p><strong>Date de participation :</strong> ${date}</p>
      <p><strong>Lot :</strong> ${prizeWon}</p>
      <p><strong>Valeur :</strong> ${prizeValue} euros</p>
      <p>Merci pour votre participation.</p>
      <p>Cordialement,<br>L'√©quipe Th√© Tip Top</p>
    `,
    envelope: {
      from: process.env.EMAIL_USER,
      to: email
    }
  };

  return sendEmail(mailOptions);
};

/**
 * Envoie un email de bienvenue √† un nouvel utilisateur apr√®s inscription.
 * @param {Object} params - Informations de l'utilisateur.
 * @param {string} params.userName - Nom de l'utilisateur.
 * @param {string} params.email - Email de l'utilisateur.
 * @returns {Promise}
 */
const sendWelcomeEmail = async ({ userName, email }) => {
  const mailOptions = {
    from: `Th√© Tip Top <${process.env.EMAIL_USER}>`,
    to: email,
    subject: 'Bienvenue dans l‚Äôunivers Th√© Tip Top ! üåø',
    text: `Bonjour ${userName},

        Nous vous souhaitons la bienvenue dans la communaut√© Th√© Tip Top üçµ.

        Merci de votre inscription. Vous pouvez d√®s maintenant participer √† nos concours, gagner des cadeaux, et profiter de nos offres exclusives !

        Restez connect√©s, et encore bienvenue parmi nous üòä

Cordialement,
L'√©quipe Th√© Tip Top`,
    html: `
      <p>Bonjour <strong>${userName}</strong>,</p>
      <p>Nous vous souhaitons la bienvenue dans la communaut√© <strong>Th√© Tip Top</strong> üçµ.</p>
      <p>Merci de votre inscription. Vous pouvez d√®s maintenant participer √† nos concours, gagner des cadeaux, et profiter de nos offres exclusives !</p>
      <p>Restez connect√©s, et encore bienvenue parmi nous üòä</p>
      <p>Cordialement,<br><em>L'√©quipe Th√© Tip Top</em></p>
    `,
    envelope: {
      from: process.env.EMAIL_USER,
      to: email
    }
  };

  return sendEmail(mailOptions); //
};




/**
 * Notifie l'administrateur qu'un utilisateur a envoy√© un message via la page contact.
 * @param {Object} params - Les param√®tres n√©cessaires.
 * @param {string} params.userName - Nom de l'utilisateur.
 * @param {string} params.email - Email de l'utilisateur.
 * @param {string} params.subject - Sujet du message.
 * @param {string} params.message - Le contenu du message.
 * @returns {Promise}
 */
const sendAdminContactNotification = async ({ userName, email, subject, message }) => {
  const mailOptions = {
    from: `${userName} <${email}>`,
    to: 'contact.developeur@gmail.com', // email de l'administrateur
    subject: `Nouveau message de contact : ${subject}`,
    text: `Vous avez re√ßu un nouveau message de la part de ${userName} (${email}) :

Sujet : ${subject}

Message :
${message}

Cordialement,
Votre site.`,
    html: `
      <h3>Nouveau message de contact</h3>
      <p><strong>De :</strong> ${userName} (<em>${email}</em>)</p>
      <p><strong>Sujet :</strong> ${subject}</p>
      <p><strong>Message :</strong><br>${message}</p>
      <p>Cordialement,<br>Votre site.</p>
    `,
    envelope: {
      from: process.env.EMAIL_USER,
      to: 'contact.developeur@gmail.com'
    }
  };

  return sendEmail(mailOptions);
};

/**
 * Envoie un email de confirmation √† l'utilisateur apr√®s l'envoi de son message.
 * @param {Object} params - Les param√®tres n√©cessaires.
 * @param {string} params.userName - Nom de l'utilisateur.
 * @param {string} params.email - Email de l'utilisateur.
 * @param {string} params.subject - Sujet du message envoy√©.
 * @returns {Promise}
 */
const sendUserContactNotification = async ({ userName, email, subject }) => {
  const mailOptions = {
    from: `Th√© Tip Top <${process.env.EMAIL_USER}>`,
    to: email,
    subject: 'Nous avons bien re√ßu votre message',
    text: `Bonjour ${userName},

Nous confirmons la r√©ception de votre message concernant : "${subject}".
Nous reviendrons vers vous dans les plus brefs d√©lais.

Cordialement,
L'√©quipe Th√© Tip Top`,
    html: `
      <p>Bonjour <strong>${userName}</strong>,</p>
      <p>Nous confirmons la r√©ception de votre message concernant : "<strong>${subject}</strong>".</p>
      <p>Nous reviendrons vers vous dans les plus brefs d√©lais.</p>
      <p>Cordialement,<br>L'√©quipe Th√© Tip Top</p>
    `,
    envelope: {
      from: process.env.EMAIL_USER,
      to: email
    }
  };

  return sendEmail(mailOptions);
};

/**
 * Envoie un email de r√©initialisation de mot de passe.
 * @param {Object} params - Les param√®tres n√©cessaires.
 * @param {string} params.userName - Nom de l'utilisateur.
 * @param {string} params.email - Email de l'utilisateur.
 * @param {string} params.resetUrl - URL pour la r√©initialisation du mot de passe.
 * @returns {Promise}
 */
const sendPasswordResetEmail = async ({ userName, email, resetUrl }) => {
  const mailOptions = {
    from: `Th√© Tip Top <${process.env.EMAIL_USER}>`,
    to: email,
    subject: 'R√©initialisation de votre mot de passe',
    text: `Bonjour ${userName},

Pour r√©initialiser votre mot de passe, veuillez cliquer sur le lien suivant : ${resetUrl}

Si vous n'avez pas demand√© la r√©initialisation, veuillez ignorer cet email.

Cordialement,
L'√©quipe Th√© Tip Top`,
    html: `
      <p>Bonjour <strong>${userName}</strong>,</p>
      <p>Pour r√©initialiser votre mot de passe, veuillez cliquer sur le lien suivant : <a href="${resetUrl}">${resetUrl}</a></p>
      <p>Si vous n'avez pas demand√© la r√©initialisation, veuillez ignorer cet email.</p>
      <p>Cordialement,<br>L'√©quipe Th√© Tip Top</p>
    `,
    envelope: {
      from: process.env.EMAIL_USER,
      to: email
    }
  };

  return transporter.sendMail(mailOptions);
};

module.exports = {
  sendAdminNotification,
  sendPlayerNotification,
  sendWelcomeEmail,
  sendAdminContactNotification,
  sendUserContactNotification,
  sendPasswordResetEmail
};