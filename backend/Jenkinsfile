// pipeline {
//     agent {
//         docker {
//             image 'node:18'
//             args '-u root' // Active les permissions si n√©cessaires
//         }
//     }

//     environment {
//         NODE_ENV = 'test'
//         SONARQUBE_URL = 'http://sonarqube:9000'
//         SONARQUBE_TOKEN = credentials('sonarqube-token')
//         VPS_USER = 'root'
//         VPS_HOST = '161.97.76.223'
//         REMOTE_PROJECT_PATH = '/PROJET/THETIPTOP_GAME/backend'
//         SYSTEM_DEBUG = 'true'
//     }

//     stages {
//         stage('Checkout Code') {
//             steps {
//                 script {
//                     checkout([
//                         $class: 'GitSCM',
//                         branches: [[name: "*/${env.BRANCH_NAME}"]],
//                         extensions: [[$class: 'CleanBeforeCheckout']],
//                         userRemoteConfigs: [[url: 'https://github.com/Acharaf-Dev/THETIPTOP_GAME.git']]
//                     ])

//                     switch (env.BRANCH_NAME) {
//                         case 'main':
//                             echo "üî¥ D√©ploiement en Production"
//                             env.DOCKER_IMAGE = "thetiptop_game/backend:prod-${GIT_COMMIT}"
//                             break
//                         case 'preprod':
//                             echo "üü° D√©ploiement en Pr√©production"
//                             env.DOCKER_IMAGE = "thetiptop_game/backend:preprod-${GIT_COMMIT}"
//                             break
//                         case 'develop':
//                         case 'test':
//                         case 'testunit':
//                             echo "üü¢ Branche de test/d√©veloppement"
//                             env.DOCKER_IMAGE = "thetiptop_game/backend:dev-${GIT_COMMIT}"
//                             break
//                         default:
//                             error "‚ùå Branche non support√©e : ${env.BRANCH_NAME}"
//                     }
//                 }
//             }
//         }

//         stage('Install Dependencies') {
//             steps {
//                 dir('backend') {
//                     script {
//                         sh 'npm install --include=dev'
//                     }
//                 }
//             }
//         }

//         stage('Audit Dependencies') {
//             steps {
//                 dir('backend') {
//                     sh 'npm audit || true'
//                 }
//             }
//         }

//         stage('Run Backend Tests + Coverage') {
//             steps {
//                 dir('backend') {
//                     sh './node_modules/.bin/jest --runInBand --coverage --verbose'
//                 }
//             }
//         }

//         stage('SonarQube Analysis') {
//             steps {
//                 dir('backend') {
//                     sh """
//                         ./node_modules/.bin/sonar-scanner \\
//                         -Dsonar.projectKey=thetiptop_game \\
//                         -Dsonar.sources=. \\
//                         -Dsonar.tests=./tests \\
//                         -Dsonar.testExecutionReportPaths=coverage/lcov.info \\
//                         -Dsonar.host.url=${SONARQUBE_URL} \\
//                         -Dsonar.login=${SONARQUBE_TOKEN}
//                     """
//                 }
//             }
//         }

//         // D√©ploiement uniquement pour main
//         stage('Build Docker Image') {
//             when {
//                 branch 'main'
//             }
//             steps {
//                 sh "docker build -t ${DOCKER_IMAGE} ./backend"
//             }
//         }

//         stage('Push Docker Image') {
//             when {
//                 branch 'main'
//             }
//             steps {
//                 withDockerRegistry([credentialsId: 'docker-hub-credentials', url: '']) {
//                     sh "docker push ${DOCKER_IMAGE}"
//                 }
//             }
//         }

//         stage('Deploy on VPS') {
//             when {
//                 branch 'main'
//             }
//             steps {
//                 sshagent(['vps-ssh-key']) {
//                     sh """
//                         ssh ${VPS_USER}@${VPS_HOST} << 'EOF'
//                         cd ${REMOTE_PROJECT_PATH}
//                         docker compose pull
//                         docker compose up -d --force-recreate
//                         EOF
//                     """
//                 }
//             }
//         }
//     }

//     post {
//         success {
//             echo '‚úÖ Pipeline termin√© avec succ√®s.'
//         }
//         failure {
//             echo '‚ùå Pipeline √©chou√©. V√©rifie les erreurs.'
//         }
//     }
// }




pipeline {
    agent {
        docker {
            image 'node:18'
            args '-u root'
        }
    }

    environment {
        NODE_ENV = 'test'
        SONARQUBE_URL = 'http://sonarqube:9000'
        SONARQUBE_TOKEN = credentials('sonarqube-token')
        VPS_USER = 'root'
        VPS_HOST = '161.97.76.223'
        REMOTE_PROJECT_PATH = '/PROJET/THETIPTOP_GAME/backend'
        SYSTEM_DEBUG = 'true'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${env.BRANCH_NAME}"]],
                        extensions: [[$class: 'CleanBeforeCheckout']],
                        userRemoteConfigs: [[url: 'https://github.com/Acharaf-Dev/THETIPTOP_GAME.git']]
                    ])

                    switch (env.BRANCH_NAME) {
                        case 'main':
                            echo "üî¥ D√©ploiement en Production"
                            env.DOCKER_IMAGE = "thetiptop_game/backend:prod-${GIT_COMMIT}"
                            break
                        case 'preprod':
                            echo "üü° D√©ploiement en Pr√©production"
                            env.DOCKER_IMAGE = "thetiptop_game/backend:preprod-${GIT_COMMIT}"
                            break
                        case 'develop':
                        case 'test':
                        case 'testunit':
                            echo "üü¢ Branche de test/d√©veloppement"
                            env.DOCKER_IMAGE = "thetiptop_game/backend:dev-${GIT_COMMIT}"
                            break
                        default:
                            error "‚ùå Branche non support√©e : ${env.BRANCH_NAME}"
                    }
                }
            }
        }

        stage('Audit Dependencies') {
            steps {
                dir('backend') {
                    sh 'npm install --include=dev'
                    sh 'npm audit || true'
                }
            }
        }

        stage('Run Backend Tests + Coverage (in Docker)') {
            steps {
                echo 'üß™ Lancement des tests dans un environnement isol√© Docker'
                sh 'docker compose -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from backend-test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('backend') {
                    sh """
                        ./node_modules/.bin/sonar-scanner \\
                        -Dsonar.projectKey=thetiptop_game \\
                        -Dsonar.sources=. \\
                        -Dsonar.tests=./tests \\
                        -Dsonar.testExecutionReportPaths=coverage/lcov.info \\
                        -Dsonar.host.url=${SONARQUBE_URL} \\
                        -Dsonar.login=${SONARQUBE_TOKEN}
                    """
                }
            }
        }

        stage('Build Docker Image') {
            when {
                branch 'main'
            }
            steps {
                sh "docker build -t ${DOCKER_IMAGE} ./backend"
            }
        }

        stage('Push Docker Image') {
            when {
                branch 'main'
            }
            steps {
                withDockerRegistry([credentialsId: 'docker-hub-credentials', url: '']) {
                    sh "docker push ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Deploy on VPS') {
            when {
                branch 'main'
            }
            steps {
                sshagent(['vps-ssh-key']) {
                    sh """
                        ssh ${VPS_USER}@${VPS_HOST} << 'EOF'
                        cd ${REMOTE_PROJECT_PATH}
                        docker compose pull
                        docker compose up -d --force-recreate
                        EOF
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Nettoyage de l‚Äôenvironnement de test'
            sh 'docker compose -f docker-compose.test.yml down -v || true'
        }
        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s.'
        }
        failure {
            echo '‚ùå Pipeline √©chou√©. V√©rifie les erreurs.'
        }
    }
}
    