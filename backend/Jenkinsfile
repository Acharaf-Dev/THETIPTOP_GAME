pipeline {
    agent any // Switched to run on Jenkins host with Docker access

    environment {
        NODE_ENV = 'test'
        SONARQUBE_URL = 'http://sonarqube:9000'
        SONARQUBE_TOKEN = credentials('sonarqube-token')
        VPS_USER = 'root'
        VPS_HOST = '161.97.76.223'
        REMOTE_PROJECT_PATH = '/PROJET/THETIPTOP_GAME'
        SYSTEM_DEBUG = 'true'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${env.BRANCH_NAME}"]],
                        extensions: [[$class: 'CleanBeforeCheckout']],
                        userRemoteConfigs: [[url: 'https://github.com/Acharaf-Dev/THETIPTOP_GAME.git']]
                    ])

                    switch (env.BRANCH_NAME) {
                        case 'main':
                            echo "üî¥ D√©ploiement en Production"
                            env.DOCKER_IMAGE = "thetiptop_game/backend:prod-${GIT_COMMIT}"
                            break
                        case 'preprod':
                            echo "üü° D√©ploiement en Pr√©production"
                            env.DOCKER_IMAGE = "thetiptop_game/backend:preprod-${GIT_COMMIT}"
                            break
                        case 'develop':
                        case 'test':
                        case 'testunit':
                            echo "üü¢ Branche de test/d√©veloppement"
                            env.DOCKER_IMAGE = "thetiptop_game/backend:dev-${GIT_COMMIT}"
                            break
                        default:
                            error "‚ùå Branche non support√©e : ${env.BRANCH_NAME}"
                    }
                }
            }
        }

        // stage('Install Dependencies') {
        //     steps {
        //         dir('backend') {
        //             script {
        //                 sh 'npm install --include=dev'
        //             }
        //         }
        //     }
        // }

        // stage('Audit Dependencies') {
        //     steps {
        //         dir('backend') {
        //             sh 'npm audit || true'
        //         }
        //     }
        // }

       stage('Start Containers on VPS') {
        steps {
        sshagent(['vps-ssh-key']) {
            sh '''
                echo "üîß Testing SSH connectivity..."
                echo "Running: ssh -v -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} echo 'Hello from VPS'"
                ssh -v -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} echo "‚úÖ SSH SUCCESSFUL"
                SSH_STATUS=$?
                echo "SSH exit status: $SSH_STATUS"
                if [ $SSH_STATUS -ne 0 ]; then
                    echo "‚ùå SSH failed"
                    exit $SSH_STATUS
                fi
            '''
        }
    }
}

        stage('Run Backend Tests + Coverage') {
            steps {
                dir('backend') {
                    sh './node_modules/.bin/jest --runInBand --coverage --verbose'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('backend') {
                    sh """
                        ./node_modules/.bin/sonar-scanner \
                        -Dsonar.projectKey=thetiptop_game \
                        -Dsonar.sources=. \
                        -Dsonar.tests=./tests \
                        -Dsonar.testExecutionReportPaths=coverage/lcov.info \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.login=${SONARQUBE_TOKEN}
                    """
                }
            }
        }

        stage('Deploy on VPS') {
            when {
                branch 'main'
            }
            steps {
                sshagent(['vps-ssh-key']) {
                    sh """
                        ssh ${VPS_USER}@${VPS_HOST} << 'EOF'
                        cd ${REMOTE_PROJECT_PATH}
                        docker compose pull
                        docker compose up -d --force-recreate
                        EOF
                    """
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s.'
        }
        failure {
            echo '‚ùå Pipeline √©chou√©. V√©rifie les erreurs.'
        }
    }
}