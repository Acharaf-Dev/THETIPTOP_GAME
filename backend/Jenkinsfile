pipeline {
  agent any

  environment {
    NODE_ENV = 'test'
    SONARQUBE_URL = 'http://sonarqube:9000'
    SONARQUBE_TOKEN = credentials('sonarqube-token')
    VPS_USER = 'root'
    VPS_HOST = '161.97.76.223'
    REMOTE_PROJECT_PATH = '/root/PROJET/THETIPTOP_GAME'
    SYSTEM_DEBUG = 'true'
  }

  stages {
    stage('Checkout Code') {
      steps {
        script {
          checkout([
            $class: 'GitSCM',
            branches: [[name: "*/${env.BRANCH_NAME}"]],
            extensions: [[$class: 'CleanBeforeCheckout']],
            userRemoteConfigs: [[url: 'https://github.com/Acharaf-Dev/THETIPTOP_GAME.git']]
          ])

          switch (env.BRANCH_NAME) {
            case 'main':
              echo "üî¥ D√©ploiement en Production"
              env.DOCKER_IMAGE = "thetiptop_game/backend:prod-${GIT_COMMIT}"
              break
            case 'preprod':
              echo "üü° D√©ploiement en Pr√©production"
              env.DOCKER_IMAGE = "thetiptop_game/backend:preprod-${GIT_COMMIT}"
              break
            case 'develop':
            case 'test':
            case 'testunit':
              echo "üü¢ Branche de test/d√©veloppement"
              env.DOCKER_IMAGE = "thetiptop_game/backend:dev-${GIT_COMMIT}"
              break
            default:
              error "‚ùå Branche non support√©e : ${env.BRANCH_NAME}"
          }
        }
      }
    }

    stage('Run Backend Tests on VPS') {
      steps {
        sshagent(['vps-ssh-key']) {
          sh """
            echo "üöÄ Connexion SSH √† ${VPS_HOST} pour ex√©cuter les tests..."
            ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
              cd ${REMOTE_PROJECT_PATH}
              docker compose exec -T backend npm test
            EOF
          """
        }
      }
    }
stage('SonarQube Analysis') {
  steps {
    sshagent(['vps-ssh-key']) {
      sh """
        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
          cd ${REMOTE_PROJECT_PATH}/backend
          sonar-scanner \\
            -Dsonar.projectKey=thetiptop_game \\
            -Dsonar.sources=. \\
            -Dsonar.tests=./tests \\
            -Dsonar.testExecutionReportPaths=coverage/lcov.info \\
            -Dsonar.host.url=${SONARQUBE_URL} \\
            -Dsonar.login=${SONARQUBE_TOKEN}
            EOF
          """
        }
      }
    }

    // stage('Start or Restart Containers on VPS') {
    //   steps {
    //     sshagent(['vps-ssh-key']) {
    //       sh """
    //         ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
    //           cd ${REMOTE_PROJECT_PATH}
    //           docker compose pull
    //           docker compose up -d --force-recreate
    //         EOF
    //       """
    //     }
    //   }
    // }

    stage('Deploy on VPS') {
      when {
        branch 'main'
      }
      steps {
        sshagent(['vps-ssh-key']) {
          sh """
            ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
              cd ${REMOTE_PROJECT_PATH}
              docker compose pull
              docker compose up -d --force-recreate
            EOF
          """
        }
      }
    }
  }

  post {
    success {
      echo '‚úÖ Pipeline termin√© avec succ√®s.'
    }
    failure {
      echo '‚ùå Pipeline √©chou√©. V√©rifie les erreurs.'
    }
  }
}
