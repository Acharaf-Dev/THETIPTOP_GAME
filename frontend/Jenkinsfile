pipeline {
    tools {
        nodejs 'NodeJS_20' // Utilise NodeJS 20 configuré dans Jenkins
    }

    agent {
        docker {
            image 'node:20'
        }
    }

    environment {
        NODE_ENV = 'production'
        SONAR_HOST_URL = 'http://sonarqube:9000'
        SONAR_TOKEN = credentials('sonarqube-token')
        GIT_REPO = 'https://github.com/Acharaf-Dev/THETIPTOP_GAME.git'
        DOCKER_IMAGE = "tiptop_frontend:${env.BRANCH_NAME}-${env.BUILD_NUMBER}"
        DOCKER_TAG_LATEST = "tiptop_frontend:${env.BRANCH_NAME}"
        SSH_CREDENTIALS = 'vps-ssh-key'
        VPS_USER = 'root'
        VPS_HOST = '161.97.76.223'
        CONTAINER_NAME = 'tip_top_frontend'
        PROJECT_PATH = '/root/THETIPTOP_GAME/frontend'
    }

    stages {
        stage('📥 Checkout') {
            steps {
                git branch: env.BRANCH_NAME, credentialsId: 'github-token', url: env.GIT_REPO
            }
        }

        stage('📦 Clean & Install Dependencies') {
            steps {
                echo "🔥 Suppression de node_modules et de fichiers de verrouillage"
                sh 'rm -rf node_modules package-lock.json'

                echo "📦 Réinstallation des dépendances"
                sh 'npm install'
            }
        }

        stage('🧹 Lint Code') {
            steps {
                echo "🧹 Linting et correction automatique avec ESLint"
                sh 'npm run lint'
            }
        }

        stage('🧪 Run Tests') {
            steps {
                echo "🧪 Exécution des tests unitaires"
                sh 'npm run test || true'
            }
        }

        stage('🔎 SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "npm run sonar"
                }
            }
        }

        stage('⚙️ Build React App') {
            steps {
                echo "⚙️ Construction de l'application React"
                sh 'npm run build'
            }
        }

        stage('🐳 Docker Build') {
            steps {
                echo "🐳 Construction de l'image Docker"
                sh "docker build -f Dockerfile.prod -t ${DOCKER_IMAGE} -t ${DOCKER_TAG_LATEST} ."
            }
        }

        stage('🚀 Deploy to VPS') {
            steps {
                sshagent([env.SSH_CREDENTIALS]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
                        cd ${PROJECT_PATH}
                        docker stop ${CONTAINER_NAME} || true
                        docker rm ${CONTAINER_NAME} || true
                        docker rmi ${DOCKER_TAG_LATEST} || true
                        docker build -f Dockerfile.prod -t ${DOCKER_TAG_LATEST} .
                        docker run -d --name ${CONTAINER_NAME} \
                          --network=web \
                          -e REACT_APP_API_URL=https://www.backend.dsp5-archi-f24a-15m-g8.fr/api \
                          ${DOCKER_TAG_LATEST}
                        EOF
                    """
                }
            }
        }
    }

    post {
        success {
            echo '✅ Déploiement réussi'
        }
        failure {
            echo '❌ Échec du pipeline'
        }
    }
}